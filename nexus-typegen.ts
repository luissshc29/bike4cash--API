/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Bike: { // root type
    category: string; // String!
    id: number; // Int!
    image: string; // String!
    name: string; // String!
    price: number; // Int!
  }
  Category: { // root type
    id: number; // Int!
    name: string; // String!
  }
  Query: {};
  Rating: { // root type
    id: number; // Int!
    message: string; // String!
    rating: number; // Float!
    username: string; // String!
  }
  RatingInfo: { // root type
    average: number; // Float!
    list: Array<NexusGenRootTypes['Rating'] | null>; // [Rating]!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Bike: { // field return type
    category: string; // String!
    id: number; // Int!
    image: string; // String!
    name: string; // String!
    price: number; // Int!
    rating: NexusGenRootTypes['RatingInfo']; // RatingInfo!
    recommended: boolean; // Boolean!
  }
  Category: { // field return type
    id: number; // Int!
    name: string; // String!
  }
  Query: { // field return type
    bike: NexusGenRootTypes['Bike']; // Bike!
    bikes: Array<NexusGenRootTypes['Bike'] | null>; // [Bike]!
    categories: NexusGenRootTypes['Category'][]; // [Category!]!
    category: NexusGenRootTypes['Category'] | null; // Category
  }
  Rating: { // field return type
    id: number; // Int!
    message: string; // String!
    rating: number; // Float!
    username: string; // String!
  }
  RatingInfo: { // field return type
    average: number; // Float!
    list: Array<NexusGenRootTypes['Rating'] | null>; // [Rating]!
  }
}

export interface NexusGenFieldTypeNames {
  Bike: { // field return type name
    category: 'String'
    id: 'Int'
    image: 'String'
    name: 'String'
    price: 'Int'
    rating: 'RatingInfo'
    recommended: 'Boolean'
  }
  Category: { // field return type name
    id: 'Int'
    name: 'String'
  }
  Query: { // field return type name
    bike: 'Bike'
    bikes: 'Bike'
    categories: 'Category'
    category: 'Category'
  }
  Rating: { // field return type name
    id: 'Int'
    message: 'String'
    rating: 'Float'
    username: 'String'
  }
  RatingInfo: { // field return type name
    average: 'Float'
    list: 'Rating'
  }
}

export interface NexusGenArgTypes {
  Query: {
    bike: { // args
      id: number; // Int!
    }
    bikes: { // args
      category?: string | null; // String
      maxPrice?: number | null; // Int
      search?: string | null; // String
    }
    category: { // args
      name: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}